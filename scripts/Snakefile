#! /usr/bin/env python
# by Theo Tricou
#
import os
import random

# extinction = 0
extant_species = [100]
sample_species = 20
n_gene_tree = 1500
n_simulation = 16
transfer_rate = 0.025
extinction_rate = 0
workdir: "./"


rule all:
    message:
        """
            A rule to rule them all.
        """
    input:
        map_sim = expand("Extant_{extant}/sim_{sim}/Nodes_mapping_sim.txt", extant = extant_species, sim  = list(range(n_simulation))),
        map_ale = expand("Extant_{extant}/sim_{sim}/Nodes_mapping_ale.txt", extant = extant_species, sim  = list(range(n_simulation))),
        ale_rec = expand("Extant_{extant}/sim_{sim}/aletree_{gene}_sampledtree.nwk.ale.uTs", extant = extant_species, sim  = list(range(n_simulation)), gene  = list(range(1,n_gene_tree+1))),
        # ranger_rec = expand("Extant_{extant}/sim_{sim}/aletree_{gene}_sampledtree.nwk.ranger.uTs", extant = extant_species, sim  = list(range(n_simulation)), gene  = list(range(1,n_gene_tree+1))),
        # notung_rec = expand("Extant_{extant}/sim_{sim}/aletree_{gene}_sampledtree.nwk.notung.uTs", extant = extant_species, sim  = list(range(n_simulation)), gene  = list(range(1,n_gene_tree+1))),



SEED = 42 * transfer_rate * n_gene_tree * len(extant_species) + extinction_rate
random.seed(SEED)
seeds = random.sample(range(10**8,10**9), len(extant_species))
seeder = {str(extant_species[i]): str(seeds[i]) for i in range(len(extant_species))}


rule init_parameter:
    input:
        Spe = "SpeciesTreeParameters.tsv",
        Gen = "GenomeParameters.tsv",
    output:
        Spe = "Extant_{extant}/SpeciesTreeParameters.tsv",
        Gen = "Extant_{extant}/GenomeParameters.tsv",
    params:
        n_gene = n_gene_tree,
        tr = transfer_rate,
        extinction = extinction_rate,
    shell:
        """
            mkdir -p Extant_{wildcards.extant}
            cp {input.Spe} {output.Spe}
            cp {input.Gen} {output.Gen}

            sed -i "s/NNNN/{wildcards.extant}/g;s/EEEE/{params.extinction}/g" {output.Spe}
            sed -i "s/TTTT/{params.tr}/g;s/GGGG/{params.n_gene}/g" {output.Gen}

        """


rule simulation:
    input:
        Spe = rules.init_parameter.output.Spe,
        Gen = rules.init_parameter.output.Gen,
    output:
        directory("Extant_{extant}/sim_0/T"),
    params:
        n_sim = n_simulation,
        seed = lambda w: seeder[w.extant],
    threads: 8
    shell:
        """
            python3 ~/GitHub/Zombi/Zombi.py T {input.Spe} Extant_{wildcards.extant}/sim_ {params.n_sim} {params.seed} {threads}

            python3 ~/GitHub/Zombi/Zombi.py Gm {input.Gen} Extant_{wildcards.extant}/sim_ {params.n_sim} {params.seed} {threads}

            python3 ~/GitHub/Zombi/SpeciesSampler.py n 20 Extant_{wildcards.extant}/sim_ {params.n_sim} {params.seed} {threads}

            touch Extant_{wildcards.extant}/{params.seed}
        """

rule stat_n_map:
    input:
      rules.simulation.output,
    output:
        tr_file = "Extant_{extant}/sim_{sim}/Transfers_sim.txt",
        map_file = "Extant_{extant}/sim_{sim}/Nodes_mapping_sim.txt",
        stat_file = "Extant_{extant}/sim_{sim}/Stats_simulation.txt",
    shell:
        """
            cd Extant_{wildcards.extant}/sim_{wildcards.sim}
            grep -P "\tT" G/Gene_families/* | awk '{{print $1, $3}}' |
              sed "s/.tsv.* / /g" | sed "s/;/ /g" | awk '{{print $1, $2, $6}}' |
              sed "s@.*/@@g" | sed 's/events/prunedtree/g' > Transfers_sim.txt

            python3 /home/theo/GitHub/Ghost_Reconciliation/scripts/nodes_mappings_sim.py

        """

rule aletree_rec:
    input:
        rules.simulation.output,
        rules.stat_n_map.output.map_file,
    output:
        aletree = "Extant_{extant}/sim_{sim}/aletree",
    shell:
        """
            cd Extant_{wildcards.extant}/sim_{wildcards.sim}

            ALEobserve SAMPLE_1/SampledSpeciesTree.nwk
            ALEml_undated SAMPLE_1/SampledSpeciesTree.nwk SAMPLE_1/SampledSpeciesTree.nwk.ale output_species_tree=y sample=0
            mv SampledSpeciesTree.nwk_SampledSpeciesTree.nwk.ale.spTree aletree
            rm SampledSpeciesTree.nwk_SampledSpeciesTree.nwk.ale*

        """

rule rec_ale:
    input:
        rules.aletree_rec.output.aletree,
    output:
        rec_file = "Extant_{extant}/sim_{sim}/aletree_{gene}_sampledtree.nwk.ale.uTs",
    shell:
        """
            cd Extant_{wildcards.extant}/sim_{wildcards.sim}
            ALEobserve SAMPLE_1/{wildcards.gene}_sampledtree.nwk
            ALEml_undated aletree SAMPLE_1/{wildcards.gene}_sampledtree.nwk.ale
            sed -i 's/([^)]*)//g' aletree_{wildcards.gene}_sampledtree.nwk.ale.uTs
            sed -i '1d' aletree_{wildcards.gene}_sampledtree.nwk.ale.uTs
            rm SAMPLE_1/{wildcards.gene}_sampledtree.nwk.ale

        """

rule ale_map:
    input:
        expand("Extant_{extant}/sim_{sim}/aletree_{gene}_sampledtree.nwk.ale.uTs", extant = extant_species, sim  = list(range(n_simulation)), gene  = list(range(1,n_gene_tree+1))),
    output:
        map_ale = "Extant_{extant}/sim_{sim}/Nodes_mapping_ale.txt",
    shell:
        """
            cd Extant_{wildcards.extant}/sim_{wildcards.sim}

            python3 /home/theo/GitHub/Ghost_Reconciliation/scripts/nodes_mappings_ale.py

        """

#
# rule rec_ranger:
#     input:
#         rules.aletree_rec.output.aletree,
#     output:
#         rec_file = "Extant_{extant}/sim_{sim}/aletree_{gene}_sampledtree.nwk.ranger.uTs",
#     shell:
#         """
#             cd Extant_{wildcards.extant}/sim_{wildcards.sim}
#             cat aletree SAMPLE_1/{wildcards.gene}_sampledtree.nwk > {wildcards.gene}_sampledtree.nwk_ranger_input
#             ~/Downloads/9_Tools/RANGER-DTL/CorePrograms/Ranger-DTL.linux -i {wildcards.gene}_sampledtree.nwk_ranger_input -o {wildcards.gene}_sampledtree.nwk_ranger_output
#             grep "Transfer," {wildcards.gene}_sampledtree.nwk_ranger_output | awk '{{print $8, $11}}' | sed "s/,//g" | sed "s/$/ 1/g" > aletree_{wildcards.gene}_sampledtree.nwk.ranger.uTs || true
#             rm {wildcards.gene}_sampledtree.nwk_ranger_*
#
#         """

# rule rec_notung:
#     input:
#       rules.aletree_rec.output.aletree,
#     output:
#         rec_file = "Extant_{extant}/sim_{sim}/aletree_{gene}_sampledtree.nwk.notung.uTs",
#     shell:
#         """
#             cd Extant_{wildcards.extant}/sim_{wildcards.sim}
#             java -jar ~/Downloads/9_Tools/Notung-2.9.1.5/Notung-2.9.1.5.jar --reconcile -g SAMPLE_1/{wildcards.gene}_sampledtree.nwk -s aletree --bootstraps name --infertransfers true --multsols 1 --parsable
#             grep "#T" {wildcards.gene}_sampledtree.nwk.reconciled.0.parsable.txt | awk '{{print $4,$5}}' | grep -o "[0-9].*" | sed "s/$/ 1/g" > aletree_{wildcards.gene}_sampledtree.nwk.notung.uTs || true
#             rm {wildcards.gene}_sampledtree.nwk.reconciled*
#
#         """

# rule cat_and_cut:
#     input:
#       rules.aletree_rec.output.aletree,
#       expand("Extant_{extant}/sim_{sim}/aletree_{gene}_sampledtree.nwk.{tool}.uTs", extant = extant_species, sim  = list(range(n_simulation)), gene  = list(range(1,n_gene_tree+1)), tool = ["ale"]),
#     output:
#         map_file = "Extant_{extant}/sim_{sim}/Nodes_mapping_ale.txt",
#         zip_dir =  "Extant_{extant}/sim_{sim}/G_and_Sample.tar.xz",
#     shell:
#         """
#             cd Extant_{wildcards.extant}/sim_{wildcards.sim}
#             find . -type f -empty -print -delete
#
#             for i in *uTs; do
#               ngene=`cut -d'.' -f 1 <<< $i`
#               rec=`cut -d'.' -f 3 <<< $i`
#               sed "s/^/$ngene $rec /g" $i
#             done > Transfers_rec.txt
#
#             python3 /home/theo/GitHub/Ghost_Reconciliation/scripts/nodes_mappings_ale.py
#
#             tar -cf - G/ SAMPLE_1 | xz -9ze -T0 > G_and_Sample.tar.xz
#             rm -rf  G/ SAMPLE_1
#         """
#



# GNU Ghost
